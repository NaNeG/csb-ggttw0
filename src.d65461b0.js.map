{"version":3,"sources":["src/index.js"],"names":["enc_n_Cambridge","options","maxexample","word","api","locale","indexOf","promises","findCambridge","findYoudao","Promise","all","results","concat","filter","x","T","node","innerText","trim","notes","url","encodeURIComponent","doc","fetch","data","parser","DOMParser","parseFromString","entries","querySelectorAll","entry","definitions","audios","expression","querySelector","reading","readings","reading_uk","reading_us","pos","getAttribute","sensbodys","sensbody","sensblocks","childNodes","sensblock","phrasehead","defblocks","classList","contains","length","defblock","eng_tran","chn_tran","definition","replace","RegExp","tran","examps","index","examp","eng_examp","chn_examp","push","css","renderCSS","getYoudao","getYDTrans","transNode","defNodes","defNode","def","match","exec","youdao","ydtrans"],"mappings":"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","file":"src.d65461b0.js","sourceRoot":"..","sourcesContent":["/* global api */\nclass enc_n_Cambridge {\n  constructor(options) {\n    this.options = options;\n    this.maxexample = 2;\n    this.word = \"\";\n  }\n\n  async displayName() {\n    let locale = await api.locale();\n    if (locale.indexOf(\"CN\") != -1) return \"剑桥英汉双解(简体)\";\n    if (locale.indexOf(\"TW\") != -1) return \"劍橋英漢雙解(簡體)\";\n    return \"Cambridge ccw\";\n  }\n\n  setOptions(options) {\n    this.options = options;\n    this.maxexample = options.maxexample;\n  }\n\n  async findTerm(word) {\n    this.word = word;\n    let promises = [this.findCambridge(word), this.findYoudao(word)];\n    let results = await Promise.all(promises);\n    return [].concat(...results).filter((x) => x);\n  }\n\n  async findCambridge(word) {\n    let notes = [];\n    if (!word) return notes; // return empty notes\n\n    function T(node) {\n      if (!node) return \"\";\n      else return node.innerText.trim();\n    }\n\n    let base =\n      \"https://dictionary.cambridge.org/search/english-chinese-simplified/direct/?q=\";\n    let url = base + encodeURIComponent(word);\n    let doc = \"\";\n    try {\n      let data = await api.fetch(url);\n      let parser = new DOMParser();\n      doc = parser.parseFromString(data, \"text/html\");\n    } catch (err) {\n      return [];\n    }\n\n    let entries = doc.querySelectorAll(\".pr .entry-body__el\") || [];\n    for (const entry of entries) {\n      let definitions = [];\n      let audios = [];\n\n      let expression = T(entry.querySelector(\".headword\"));\n      let reading = \"\";\n      let readings = entry.querySelectorAll(\".pron .ipa\");\n      if (readings) {\n        let reading_uk = T(readings[0]);\n        let reading_us = T(readings[1]);\n        reading =\n          reading_uk || reading_us\n            ? `UK[${reading_uk}] US[${reading_us}] `\n            : \"\";\n      }\n      let pos = T(entry.querySelector(\".posgram\"));\n      pos = pos ? `<span class='pos'>${pos}</span>` : \"\";\n      audios[0] = entry.querySelector(\".uk.dpron-i source\");\n      audios[0] = audios[0]\n        ? \"https://dictionary.cambridge.org\" + audios[0].getAttribute(\"src\")\n        : \"\";\n      //audios[0] = audios[0].replace('https', 'http');\n      audios[1] = entry.querySelector(\".us.dpron-i source\");\n      audios[1] = audios[1]\n        ? \"https://dictionary.cambridge.org\" + audios[1].getAttribute(\"src\")\n        : \"\";\n      //audios[1] = audios[1].replace('https', 'http');\n\n      let sensbodys = entry.querySelectorAll(\".sense-body\") || [];\n      for (const sensbody of sensbodys) {\n        let sensblocks = sensbody.childNodes || [];\n        for (const sensblock of sensblocks) {\n          let phrasehead = \"\";\n          let defblocks = [];\n          if (\n            sensblock.classList &&\n            sensblock.classList.contains(\"phrase-block\")\n          ) {\n            phrasehead = T(sensblock.querySelector(\".phrase-title\"));\n            phrasehead = phrasehead\n              ? `<div class=\"phrasehead\">${phrasehead}</div>`\n              : \"\";\n            defblocks = sensblock.querySelectorAll(\".def-block\") || [];\n          }\n          if (\n            sensblock.classList &&\n            sensblock.classList.contains(\"def-block\")\n          ) {\n            defblocks = [sensblock];\n          }\n          if (defblocks.length <= 0) continue;\n\n          // make definition segement\n          for (const defblock of defblocks) {\n            let eng_tran = T(defblock.querySelector(\".ddef_h .def\"));\n            let chn_tran = T(defblock.querySelector(\".def-body .trans\"));\n            if (!eng_tran) continue;\n            let definition = \"\";\n            eng_tran = `<span class='eng_tran'>${eng_tran.replace(\n              RegExp(expression, \"gi\"),\n              `<b>${expression}</b>`\n            )}</span>`;\n            chn_tran = `<span class='chn_tran'>${chn_tran}</span>`;\n            let tran = `<span class='tran'>${eng_tran}${chn_tran}</span>`;\n            definition += phrasehead ? `${phrasehead}${tran}` : `${pos}${tran}`;\n\n            // make exmaple segement\n            let examps = defblock.querySelectorAll(\".def-body .examp\") || [];\n            if (examps.length > 0 && this.maxexample > 0) {\n              definition += '<ul class=\"sents\">';\n              for (const [index, examp] of examps.entries()) {\n                if (index > this.maxexample - 1) break; // to control only 2 example sentence.\n                let eng_examp = T(examp.querySelector(\".eg\"));\n                let chn_examp = T(examp.querySelector(\".trans\"));\n                definition += `<li class='sent'><span class='eng_sent'>${eng_examp.replace(\n                  RegExp(expression, \"gi\"),\n                  `<b>${expression}</b>`\n                )}</span><span class='chn_sent'>${chn_examp}</span></li>`;\n              }\n              definition += \"</ul>\";\n            }\n            definition && definitions.push(definition);\n          }\n        }\n      }\n      let css = this.renderCSS();\n      notes.push({\n        css,\n        expression,\n        reading,\n        definitions,\n        audios\n      });\n    }\n    return notes;\n  }\n\n  async findYoudao(word) {\n    if (!word) return [];\n\n    let base = \"https://dict.youdao.com/w/\";\n    let url = base + encodeURIComponent(word);\n    let doc = \"\";\n    try {\n      let data = await api.fetch(url);\n      let parser = new DOMParser();\n      doc = parser.parseFromString(data, \"text/html\");\n      let youdao = getYoudao(doc); //Combine Youdao Concise English-Chinese Dictionary to the end.\n      let ydtrans = getYDTrans(doc); //Combine Youdao Translation (if any) to the end.\n      return [].concat(youdao, ydtrans);\n    } catch (err) {\n      return [];\n    }\n\n    function getYoudao(doc) {\n      let notes = [];\n\n      //get Youdao EC data: check data availability\n      let defNodes = doc.querySelectorAll(\n        \"#phrsListTab .trans-container ul li\"\n      );\n      if (!defNodes || !defNodes.length) return notes;\n\n      //get headword and phonetic\n      let expression = T(\n        doc.querySelector(\"#phrsListTab .wordbook-js .keyword\")\n      ); //headword\n      let reading = \"\";\n      let readings = doc.querySelectorAll(\n        \"#phrsListTab .wordbook-js .pronounce\"\n      );\n      if (readings) {\n        let reading_uk = T(readings[0]);\n        let reading_us = T(readings[1]);\n        reading = reading_uk || reading_us ? `${reading_uk} ${reading_us}` : \"\";\n      }\n\n      let audios = [];\n      audios[0] = `https://dict.youdao.com/dictvoice?audio=${encodeURIComponent(\n        expression\n      )}&type=1`;\n      audios[1] = `https://dict.youdao.com/dictvoice?audio=${encodeURIComponent(\n        expression\n      )}&type=2`;\n\n      let definition = '<ul class=\"ec\">';\n      for (const defNode of defNodes) {\n        let pos = \"\";\n        let def = T(defNode);\n        let match = /(^.+?\\.)\\s/gi.exec(def);\n        if (match && match.length > 1) {\n          pos = match[1];\n          def = def.replace(pos, \"\");\n        }\n        pos = pos ? `<span class=\"pos simple\">${pos}</span>` : \"\";\n        definition += `<li class=\"ec\">${pos}<span class=\"ec_chn\">${def}</span></li>`;\n      }\n      definition += \"</ul>\";\n      let css = `\n              <style>\n                  span.pos  {text-transform:lowercase; font-size:0.9em; margin-right:5px; padding:2px 4px; color:white; background-color:#0d47a1; border-radius:3px;}\n                  span.simple {background-color: #999!important}\n                  ul.ec, li.ec {margin:0; padding:0;}\n              </style>`;\n      notes.push({\n        css,\n        expression,\n        reading,\n        definitions: [definition],\n        audios\n      });\n      return notes;\n    }\n\n    function getYDTrans(doc) {\n      let notes = [];\n\n      //get Youdao EC data: check data availability\n      let transNode = doc.querySelectorAll(\"#ydTrans .trans-container p\")[1];\n      if (!transNode) return notes;\n\n      let definition = `${T(transNode)}`;\n      let css = `\n              <style>\n                  .odh-expression {\n                      font-size: 1em!important;\n                      font-weight: normal!important;\n                  }\n              </style>`;\n      notes.push({\n        css,\n        definitions: [definition]\n      });\n      return notes;\n    }\n\n    function T(node) {\n      if (!node) return \"\";\n      else return node.innerText.trim();\n    }\n  }\n\n  renderCSS() {\n    let css = `\n          <style>\n              div.phrasehead{margin: 2px 0;font-weight: bold;}\n              span.star {color: #FFBB00;}\n              span.pos  {text-transform:lowercase; font-size:0.9em; margin-right:5px; padding:2px 4px; color:white; background-color:#0d47a1; border-radius:3px;}\n              span.tran {margin:0; padding:0;}\n              span.eng_tran {margin-right:3px; padding:0;}\n              span.chn_tran {color:#0d47a1;}\n              ul.sents {font-size:0.8em; list-style:square inside; margin:3px 0;padding:5px;background:rgba(13,71,161,0.1); border-radius:5px;}\n              li.sent  {margin:0; padding:0;}\n              span.eng_sent {margin-right:5px;}\n              span.chn_sent {color:#0d47a1;}\n          </style>`;\n    return css;\n  }\n}\n"]}